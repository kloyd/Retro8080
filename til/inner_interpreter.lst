---------------------------------------------
8085 ASSEMBLER LISTING
Line   Addr Opcode      Label   Instruction
---------------------------------------------
0001   0000             	ORG $0
0002   0000             	            ;  **********
0003   0000             	            ;  Inner Interpreter of TIL
0004   0000             	            ;  **********
0005   0000             
0006   0000             	            ;  ********************
0007   0000             	            ;  Initialization - more to come, but first, get the address of NEXT
0008   0000             	            ;  ********************
0009   0000             	            ;  See default value below.
0010   0000             
0011   0000 02 00       SEMI:	DW $+2
0012   0002             	            ;  POP RS -> IR
0013   0002 2A 9B 00    	LHLD RS     ;  Reverse of PSH. increment RS, grab byte, store at DE (location of IR)
0014   0005 11 95 00    	LXI D,IR
0015   0008 2C          	INR L       ;  RS++
0016   0009 7E          	MOV A,M
0017   000A 12          	STAX D
0018   000B 1D          	DCR E       ;  IR--
0019   000C 2C          	INR L       ;  RS++
0020   000D 7E          	MOV A,M     ;  high byte
0021   000E 12          	STAX D
0022   000F 22 9B 00    	SHLD RS     ;  save HL to RS (updated value)
0023   0012             
0024   0012             NEXT:	            ;  @IR -> WA
0025   0012 2A 95 00    	LHLD IR
0026   0015 11 97 00    	LXI D,WA
0027   0018 7E          	MOV A,M
0028   0019 12          	STAX D
0029   001A 2C          	INR L
0030   001B 1C          	INR E
0031   001C 7E          	MOV A,M
0032   001D 12          	STAX D
0033   001E 2C          	INR L       ;  IR = IR + 2 (INR twice)
0034   001F 2C          	INR L
0035   0020 22 95 00    	SHLD IR     ;  save IR
0036   0023             
0037   0023             RUN:
0038   0023 2A 97 00    	LHLD WA     ;  @WA -> CA
0039   0026 11 99 00    	LXI D,CA
0040   0029 7E          	MOV A,M
0041   002A 12          	STAX D
0042   002B 2C          	INR L
0043   002C 1C          	INR E
0044   002D 7E          	MOV A,M
0045   002E 12          	STAX D
0046   002F 2C          	INR L       ;  WA = WA + 2
0047   0030 2C          	INR L
0048   0031 22 97 00    	SHLD WA
0049   0034             	            ;  CA -> PC
0050   0034             
0051   0034 11 99 00    	LXI D,CA
0052   0037 1A          	LDAX D
0053   0038 67          	MOV H,A
0054   0039 1C          	INR E
0055   003A 6F          	MOV L,A
0056   003B E9          	PCHL        ;  Causes jump to contents of CA
0057   003C             
0058   003C             COLON:
0059   003C             	            ;  PSH I -> RS
0060   003C 2A 9B 00    	LHLD RS     ;  get RS address to HL, then get contents of RS into DE, then copy DE to HL
0061   003F 11 95 00    	LXI D,IR    ;  Address of IR to DE
0062   0042 1A          	LDAX D      ;  A <- (DE)
0063   0043 2D          	DCR L       ;  RS--
0064   0044 77          	MOV M,A     ;  (HL) < IR.L
0065   0045 1C          	INR E       ;  DE++
0066   0046 1A          	LDAX D      ;  A <-(DE+1)
0067   0047 2D          	DCR L       ;  RS--
0068   0048 77          	MOV M,A     ;  (HL) <- IR.H
0069   0049             	            ;  save contents of HL to RS memory location
0070   0049 22 9B 00    	SHLD RS     ;  store HL @ RS
0071   004C             
0072   004C             	            ;  WA -> IR
0073   004C 11 97 00    	LXI D,WA    ;  General form for Rx -> Ry Get Address Rx [WA]
0074   004F 21 95 00    	LXI H,IR    ;  Get address of Ry [IR]
0075   0052 1A          	LDAX D      ;  A <- Rx.L
0076   0053 77          	MOV M,A     ;  (Ry) <- A
0077   0054 2C          	INR L       ;  Rx++
0078   0055 1C          	INR E       ;  Ry++
0079   0056 1A          	LDAX D      ;  A <- Rx.L
0080   0057 77          	MOV M,A     ;  (Ry) <- A
0081   0058             
0082   0058             	            ;  JMP NEXT
0083   0058 2A 9D 00    	LHLD NXTR   ;  HL <- next
0084   005B E9          	PCHL        ;  set PC = HL (effective computed jump)
0085   005C             
0086   005C             	            ;  EXECUTE word definition dictionary entry. 7EXE (length 7, first three chars EXE)
0087   005C             
0088   005C 07 45 58 45 	DB 7,'E','X','E'
0089   0060 00 00       	DW 00       ;  Pointer to next Word Definition (filled when next word defined)
0090   0062             EXECUTE:
0091   0062 64 00       	DW $+2
0092   0064 E1          	POP H
0093   0065 C3 23 00    	JMP RUN
0094   0068             
0095   0068             
0096   0068             	            ;
0097   0068             
0098   0068             
0099   0068             	            ;  *** TIL code... contrived example
0100   0068             
0101   0068 03 44 55 50 	DB 3,'D','U','P'
0102   006C 7C 00       	DW CONSTANT   ;  Link Address to CONSTANT
0103   006E 70 00       DUP:	DW $+2
0104   0070 E1          	POP H       ;  POP SP -> CA
0105   0071 E5          	PUSH H      ;  PSH CA -> SP
0106   0072 E5          	PUSH H      ;  PSH CA -> SP
0107   0073 C3 12 00    	JMP NEXT
0108   0076             
0109   0076 08 43 4F 4E 	DB 8,'C','O','N'
0110   007A 00 00       	DW 0
0111   007C             CONSTANT:
0112   007C 7E 00       	DW $+2
0113   007E 3C 00       	DW COLON    ;  COLON starts a definition
0114   0080             	; CREATE
0115   0080             	; ,
0116   0080             	; SCODE
0117   0080             	; @WA -> CA
0118   0080 2A 97 00    	LHLD WA     ;  @WA -> CA
0119   0083 11 99 00    	LXI D,CA
0120   0086 7E          	MOV A,M
0121   0087 47          	MOV B,A
0122   0088 12          	STAX D
0123   0089 2C          	INR L
0124   008A 1C          	INR E
0125   008B 7E          	MOV A,M
0126   008C 4F          	MOV C,A
0127   008D 12          	STAX D
0128   008E             	; PSH CA -> SP
0129   008E C5          	PUSH B
0130   008F C3 12 00    	JMP NEXT
0131   0092             
0132   0092             
0133   0092             PSEUDO:
0134   0092 3E AA       	MvI A,$AA
0135   0094 76          	HLT
0136   0095             
0137   0095             	            ;  Testing virtual 16-bit registers held in memory.
0138   0095             	            ;  8080 cpu is limited to 3 general purpose 16 bit registers
0139   0095             	            ;  The Threaded Interpetive Language (TIL) requires the following virtual registers.
0140   0095             	            ;  IR Instruction Register - Address of next instruction in threaded list.
0141   0095             	            ;  WA Word Address Register - word address of current keyword
0142   0095             	            ;  CA Code Address Register
0143   0095             	            ;  RS Return Stack Register
0144   0095             	            ;  SP Stack Pointer == 8080 SP
0145   0095             	            ;  PC Program Counter == 8080 PC
0146   0095             	            ;  Virtual Registers
0147   0095 40 01       IR	DW $140     ;  arbitrary starting values for testing. will get better numbers when building TIL.
0148   0097 AA 01       WA	DW $1AA
0149   0099 92 00       CA	DW PSEUDO   ;  for testing... point to a 'pseudo' word.
0150   009B A0 00       RS	DW $A0      ;  Return Stack Pointer at 00A0 for ease of checking in first memory page.
0151   009D 12 00       NXTR	DW NEXT     ;  set NXTR (NeXT Register) to next.
0152   009F             
0153   009F             	ORG $A0
0154   00A0 01 02 03 04 STACK	DB 1,2,3,4,5,6
0154   00A4 05 06       
0155   00A6             	ORG $C0
0156   00C0 3E FF       	MVI A,$FF
0157   00C2 76          	HLT
0158   00C3             
Number of errors = 0
