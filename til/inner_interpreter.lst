---------------------------------------------
8085 ASSEMBLER LISTING
Line   Addr Opcode      Label   Instruction
---------------------------------------------
0001   0000             	ORG $0
0002   0000             
0003   0000             
0004   0000             	            ;  **********
0005   0000             	            ;  Inner Interpreter of TIL
0006   0000             	            ;  **********
0007   0000             	            ;  Basic definition of COLON routine
0008   0000             	            ;  PSH IR -> RS
0009   0000             	            ;  WA -> IR
0010   0000             	            ;  JMP NEXT
0011   0000             COLON
0012   0000             	            ;  **********
0013   0000             	            ;  PSH I -> RS
0014   0000             	            ;  **********
0015   0000             	            ;  get RS address to HL, then get contents of RS into DE, then copy DE to HL
0016   0000 2A 29 00    	LHLD RS     ;  Load HL Direct (contents of memory RS go to HL)
0017   0003 11 23 00    	LXI D,IR    ;  Address of IR to DE
0018   0006 1A          	LDAX D      ;  A <- (DE)
0019   0007 2D          	DCR L       ;  RS--
0020   0008 77          	MOV M,A     ;  (HL) < IR.L
0021   0009 1C          	INR E       ;  DE++
0022   000A 1A          	LDAX D      ;  A <-(DE+1)
0023   000B 2D          	DCR L       ;  RS--
0024   000C 77          	MOV M,A     ;  (HL) <- IR.H
0025   000D             	            ;  save contents of HL to RS memory location
0026   000D 22 29 00    	SHLD RS     ;  store HL @ RS
0027   0010             
0028   0010             
0029   0010             	            ;  **********
0030   0010             	            ;  WA -> IR
0031   0010             	            ;  **********
0032   0010 11 25 00    	LXI D,WA    ;  General form for Rx -> Ry Get Address Rx [WA]
0033   0013 21 23 00    	LXI H,IR    ;  Get address of Ry [IR]
0034   0016 1A          	LDAX D      ;  A <- Rx.L
0035   0017 77          	MOV M,A     ;  (Ry) <- A
0036   0018 2C          	INR L       ;  Rx++
0037   0019 1C          	INR E       ;  Ry++
0038   001A 1A          	LDAX D      ;  A <- Rx.L
0039   001B 77          	MOV M,A     ;  (Ry) <- A
0040   001C             
0041   001C             	            ;  **********
0042   001C             	            ;  JMP NEXT
0043   001C             	            ;  **********
0044   001C 2A 22 00    	LHLD NEXT   ;  HL <- next
0045   001F E9          	PCHL        ;  set PC = HL (effective computed jump)
0046   0020             
0047   0020 22 00       SEMI	DW	$+2
0048   0022             ; POP RS -> IR
0049   0022             
0050   0022             NEXT	; @IR -> WA
0051   0022             ; IR = IR + 2
0052   0022             ;
0053   0022             RUN
0054   0022             ; @WA -> CA
0055   0022             ; WA = WA + 2
0056   0022             ; CA -> PC
0057   0022             	            ;  **********
0058   0022             	            ;  (TODO) Write & Test POP RS -> I
0059   0022             	            ;  **********
0060   0022             
0061   0022 76          	HLT
0062   0023             
0063   0023             	            ;  Testing virtual 16-bit registers held in memory.
0064   0023             	            ;  8080 cpu is limited to 3 general purpose 16 bit registers
0065   0023             	            ;  The Threaded Interpetive Language (TIL) requires the following virtual registers.
0066   0023             	            ;  IR Instruction Register - Address of next instruction in threaded list.
0067   0023             	            ;  WA Word Address Register - word address of current keyword
0068   0023             	            ;  CA Code Address Register
0069   0023             	            ;  RS Return Stack Register
0070   0023             	            ;  SP Stack Pointer == 8080 SP
0071   0023             	            ;  PC Program Counter == 8080 PC
0072   0023             	            ;  Virtual Registers
0073   0023 40 01       IR	DW $140     ;  arbitrary starting values for testing. will get better numbers when building TIL.
0074   0025 AA 01       WA	DW $1AA
0075   0027 00 00       CA	DW 0
0076   0029 A0 00       RS	DW $A0      ;  Return Stack Pointer at 00A0 for ease of checking in first memory page.
0077   002B             ;NEXT	DW $C0      ;  Next instruction
0078   002B             
0079   002B             	ORG $A0
0080   00A0 01 02 03 04 STACK	DB 1,2,3,4,5,6
0080   00A4 05 06       
0081   00A6             	ORG $C0
0082   00C0 3E FF       	MVI A,$FF
0083   00C2 76          	HLT
0084   00C3             
Number of errors = 0
