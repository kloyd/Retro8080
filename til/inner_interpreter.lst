---------------------------------------------
8085 ASSEMBLER LISTING
Line   Addr Opcode      Label   Instruction
---------------------------------------------
0001   0000             	ORG $0
0002   0000             	            ;  **********
0003   0000             	            ;  Inner Interpreter of TIL
0004   0000             	            ;  **********
0005   0000             
0006   0000             	            ;  ********************
0007   0000             	            ;  Initialization - more to come, but first, get the address of NEXT
0008   0000             	            ;  ********************
0009   0000             	            ;  See default value below.
0010   0000             
0011   0000             	            ;  Basic definition of COLON routine
0012   0000             	            ;  PSH IR -> RS
0013   0000             	            ;  WA -> IR
0014   0000             	            ;  JMP NEXT
0015   0000             COLON
0016   0000             	            ;  PSH I -> RS
0017   0000             	            ;  get RS address to HL, then get contents of RS into DE, then copy DE to HL
0018   0000 2A 5B 00    	LHLD RS     ;  Load HL Direct (contents of memory RS go to HL)
0019   0003 11 55 00    	LXI D,IR    ;  Address of IR to DE
0020   0006 1A          	LDAX D      ;  A <- (DE)
0021   0007 2D          	DCR L       ;  RS--
0022   0008 77          	MOV M,A     ;  (HL) < IR.L
0023   0009 1C          	INR E       ;  DE++
0024   000A 1A          	LDAX D      ;  A <-(DE+1)
0025   000B 2D          	DCR L       ;  RS--
0026   000C 77          	MOV M,A     ;  (HL) <- IR.H
0027   000D             	            ;  save contents of HL to RS memory location
0028   000D 22 5B 00    	SHLD RS     ;  store HL @ RS
0029   0010             
0030   0010             	            ;  WA -> IR
0031   0010 11 57 00    	LXI D,WA    ;  General form for Rx -> Ry Get Address Rx [WA]
0032   0013 21 55 00    	LXI H,IR    ;  Get address of Ry [IR]
0033   0016 1A          	LDAX D      ;  A <- Rx.L
0034   0017 77          	MOV M,A     ;  (Ry) <- A
0035   0018 2C          	INR L       ;  Rx++
0036   0019 1C          	INR E       ;  Ry++
0037   001A 1A          	LDAX D      ;  A <- Rx.L
0038   001B 77          	MOV M,A     ;  (Ry) <- A
0039   001C             
0040   001C             	            ;  JMP NEXT
0041   001C 2A 5D 00    	LHLD NXTR   ;  HL <- next
0042   001F E9          	PCHL        ;  set PC = HL (effective computed jump)
0043   0020             
0044   0020 22 00       SEMI	DW $+2
0045   0022             	            ;  POP RS -> IR
0046   0022 2A 5B 00    	LHLD RS     ;  Reverse of PSH. increment RS, grab byte, store at DE (location of IR)
0047   0025 11 55 00    	LXI D,IR
0048   0028 2C          	INR L       ;  RS++
0049   0029 7E          	MOV A,M
0050   002A 12          	STAX D
0051   002B 1D          	DCR E       ;  IR--
0052   002C 2C          	INR L       ;  RS++
0053   002D 7E          	MOV A,M     ;  high byte
0054   002E 12          	STAX D
0055   002F 22 5B 00    	SHLD RS     ;  save HL to RS (updated value)
0056   0032             
0057   0032             
0058   0032             NEXT	            ;  @IR -> WA
0059   0032 2A 55 00    	LHLD IR
0060   0035 11 57 00    	LXI D,WA
0061   0038 7E          	MOV A,M
0062   0039 12          	STAX D
0063   003A 2C          	INR L
0064   003B 1C          	INR E
0065   003C 7E          	MOV A,M
0066   003D 12          	STAX D
0067   003E 2C          	INR L       ;  IR = IR + 2 (INR twice)
0068   003F 2C          	INR L
0069   0040 22 55 00    	SHLD IR     ;  save IR
0070   0043             	            ;
0071   0043             RUN
0072   0043 2A 57 00    	LHLD WA     ;  @WA -> CA
0073   0046 11 59 00    	LXI D,CA
0074   0049 7E          	MOV A,M
0075   004A 12          	STAX D
0076   004B 2C          	INR L
0077   004C 1C          	INR E
0078   004D 7E          	MOV A,M
0079   004E 12          	STAX D
0080   004F 2C          	INR L       ;  WA = WA + 2
0081   0050 2C          	INR L
0082   0051 22 57 00    	SHLD WA
0083   0054             	            ;  CA -> PC
0084   0054             
0085   0054             
0086   0054 76          	HLT
0087   0055             
0088   0055             	            ;  Testing virtual 16-bit registers held in memory.
0089   0055             	            ;  8080 cpu is limited to 3 general purpose 16 bit registers
0090   0055             	            ;  The Threaded Interpetive Language (TIL) requires the following virtual registers.
0091   0055             	            ;  IR Instruction Register - Address of next instruction in threaded list.
0092   0055             	            ;  WA Word Address Register - word address of current keyword
0093   0055             	            ;  CA Code Address Register
0094   0055             	            ;  RS Return Stack Register
0095   0055             	            ;  SP Stack Pointer == 8080 SP
0096   0055             	            ;  PC Program Counter == 8080 PC
0097   0055             	            ;  Virtual Registers
0098   0055 40 01       IR	DW $140     ;  arbitrary starting values for testing. will get better numbers when building TIL.
0099   0057 AA 01       WA	DW $1AA
0100   0059 00 00       CA	DW 0
0101   005B A0 00       RS	DW $A0      ;  Return Stack Pointer at 00A0 for ease of checking in first memory page.
0102   005D 32 00       NXTR	DW NEXT     ;  set NXTR (NeXT Register) to next.
0103   005F             
0104   005F             	ORG $A0
0105   00A0 01 02 03 04 STACK	DB 1,2,3,4,5,6
0105   00A4 05 06       
0106   00A6             	ORG $C0
0107   00C0 3E FF       	MVI A,$FF
0108   00C2 76          	HLT
0109   00C3             
Number of errors = 0
