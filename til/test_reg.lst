---------------------------------------------
8085 ASSEMBLER LISTING
Line   Addr Opcode      Label   Instruction
---------------------------------------------
0001   0000             	ORG $0
0002   0000             	            ;  Testing virtual 16-bit registers held in memory.
0003   0000             	            ;  8080 cpu is limited to 3 general purpose 16 bit registers
0004   0000             	            ;  The Threaded Interpetive Language (TIL) requires the following virtual registers.
0005   0000             	            ;  IR Instruction Register - Address of next instruction in threaded list.
0006   0000             	            ;  WA Word Address Register - word address of current keyword
0007   0000             	            ;  CA Code Address Register
0008   0000             	            ;  RS Return Stack Register
0009   0000             	            ;  SP Stack Pointer == 8080 SP
0010   0000             	            ;  PC Program Counter == 8080 PC
0011   0000             
0012   0000             	            ;  Basic definition of COLON routine
0013   0000             	            ;  PSH IR -> RS
0014   0000             	            ;  WA -> IR
0015   0000             	            ;  JMP NEXT
0016   0000             COLON
0017   0000             	            ;  **********
0018   0000             	            ;  PSH I -> RS
0019   0000             	            ;  **********
0020   0000             	            ;  get RS address to HL, then get contents of RS into DE, then copy DE to HL
0021   0000 2A 27 00    	LHLD RS     ;  Load HL Direct (contents of memory RS go to HL)
0022   0003 11 21 00    	LXI D,IR    ;  Address of IR to DE
0023   0006 1A          	LDAX D      ;  A <- (DE)
0024   0007 2D          	DCR L       ;  RS--
0025   0008 77          	MOV M,A     ;  (HL) < IR.L
0026   0009 1C          	INR E       ;  DE++
0027   000A 1A          	LDAX D      ;  A <-(DE+1)
0028   000B 2D          	DCR L       ;  RS--
0029   000C 77          	MOV M,A     ;  (HL) <- IR.H
0030   000D             	            ;  save contents of HL to RS memory location
0031   000D 22 27 00    	SHLD RS     ;  store HL @ RS
0032   0010             
0033   0010             	            ;  **********
0034   0010             	            ;  WA -> IR
0035   0010             	            ;  **********
0036   0010 11 23 00    	LXI D,WA    ;  General form for Rx -> Ry Get Address Rx [WA]
0037   0013 21 21 00    	LXI H,IR    ;  Get address of Ry [IR]
0038   0016 1A          	LDAX D      ;  A <- Rx.L
0039   0017 77          	MOV M,A     ;  (Ry) <- A
0040   0018 2C          	INR L       ;  Rx++
0041   0019 1C          	INR E       ;  Ry++
0042   001A 1A          	LDAX D      ;  A <- Rx.L
0043   001B 77          	MOV M,A     ;  (Ry) <- A
0044   001C             
0045   001C             	            ;  **********
0046   001C             	            ;  JMP NEXT
0047   001C             	            ;  **********
0048   001C 2A 29 00    	LHLD NEXT   ;  HL <- next
0049   001F E9          	PCHL        ;  set PC = HL (effective computed jump)
0050   0020             
0051   0020             	            ;  **********
0052   0020             	            ;  (TODO) Write & Test POP RS -> I
0053   0020             	            ;  **********
0054   0020             
0055   0020 76          	HLT
0056   0021             
0057   0021             	            ;  Virtual Registers
0058   0021 40 01       IR	DW $140     ;  arbitrary starting values for testing. will get better numbers when building TIL.
0059   0023 AA 01       WA	DW $1AA
0060   0025 00 00       CA	DW 0
0061   0027 A0 00       RS	DW $A0      ;  Return Stack Pointer at 00A0 for ease of checking in first memory page.
0062   0029 C0 00       NEXT	DW $C0      ;  Next instruction
0063   002B             
0064   002B             	ORG $A0
0065   00A0 01 02 03 04 STACK	DB 1,2,3,4,5,6
0065   00A4 05 06       
0066   00A6             	ORG $C0
0067   00C0 3E FF       	MVI A,$FF
0068   00C2 76          	HLT
0069   00C3             
Number of errors = 0
